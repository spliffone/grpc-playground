// Code generated by MockGen. DO NOT EDIT.
// Source: proto/product_grpc.pb.go

// Package mock_productinfo is a generated GoMock package.
package mock_productinfo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/spliffone/grpc-playground/basics/go/proto"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockProductInfoClient is a mock of ProductInfoClient interface.
type MockProductInfoClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductInfoClientMockRecorder
}

// MockProductInfoClientMockRecorder is the mock recorder for MockProductInfoClient.
type MockProductInfoClientMockRecorder struct {
	mock *MockProductInfoClient
}

// NewMockProductInfoClient creates a new mock instance.
func NewMockProductInfoClient(ctrl *gomock.Controller) *MockProductInfoClient {
	mock := &MockProductInfoClient{ctrl: ctrl}
	mock.recorder = &MockProductInfoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductInfoClient) EXPECT() *MockProductInfoClientMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductInfoClient) AddProduct(ctx context.Context, in *proto.Product, opts ...grpc.CallOption) (*proto.ProductID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProduct", varargs...)
	ret0, _ := ret[0].(*proto.ProductID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductInfoClientMockRecorder) AddProduct(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductInfoClient)(nil).AddProduct), varargs...)
}

// GetProduct mocks base method.
func (m *MockProductInfoClient) GetProduct(ctx context.Context, in *proto.ProductID, opts ...grpc.CallOption) (*proto.Product, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProduct", varargs...)
	ret0, _ := ret[0].(*proto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductInfoClientMockRecorder) GetProduct(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductInfoClient)(nil).GetProduct), varargs...)
}

// SearchProducts mocks base method.
func (m *MockProductInfoClient) SearchProducts(ctx context.Context, in *proto.SearchQuery, opts ...grpc.CallOption) (proto.ProductInfo_SearchProductsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProducts", varargs...)
	ret0, _ := ret[0].(proto.ProductInfo_SearchProductsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProducts indicates an expected call of SearchProducts.
func (mr *MockProductInfoClientMockRecorder) SearchProducts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProducts", reflect.TypeOf((*MockProductInfoClient)(nil).SearchProducts), varargs...)
}

// MockProductInfo_SearchProductsClient is a mock of ProductInfo_SearchProductsClient interface.
type MockProductInfo_SearchProductsClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductInfo_SearchProductsClientMockRecorder
}

// MockProductInfo_SearchProductsClientMockRecorder is the mock recorder for MockProductInfo_SearchProductsClient.
type MockProductInfo_SearchProductsClientMockRecorder struct {
	mock *MockProductInfo_SearchProductsClient
}

// NewMockProductInfo_SearchProductsClient creates a new mock instance.
func NewMockProductInfo_SearchProductsClient(ctrl *gomock.Controller) *MockProductInfo_SearchProductsClient {
	mock := &MockProductInfo_SearchProductsClient{ctrl: ctrl}
	mock.recorder = &MockProductInfo_SearchProductsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductInfo_SearchProductsClient) EXPECT() *MockProductInfo_SearchProductsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockProductInfo_SearchProductsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockProductInfo_SearchProductsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockProductInfo_SearchProductsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockProductInfo_SearchProductsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockProductInfo_SearchProductsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProductInfo_SearchProductsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockProductInfo_SearchProductsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockProductInfo_SearchProductsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockProductInfo_SearchProductsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockProductInfo_SearchProductsClient) Recv() (*proto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockProductInfo_SearchProductsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockProductInfo_SearchProductsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockProductInfo_SearchProductsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockProductInfo_SearchProductsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockProductInfo_SearchProductsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockProductInfo_SearchProductsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockProductInfo_SearchProductsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockProductInfo_SearchProductsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockProductInfo_SearchProductsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockProductInfo_SearchProductsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockProductInfo_SearchProductsClient)(nil).Trailer))
}

// MockProductInfoServer is a mock of ProductInfoServer interface.
type MockProductInfoServer struct {
	ctrl     *gomock.Controller
	recorder *MockProductInfoServerMockRecorder
}

// MockProductInfoServerMockRecorder is the mock recorder for MockProductInfoServer.
type MockProductInfoServerMockRecorder struct {
	mock *MockProductInfoServer
}

// NewMockProductInfoServer creates a new mock instance.
func NewMockProductInfoServer(ctrl *gomock.Controller) *MockProductInfoServer {
	mock := &MockProductInfoServer{ctrl: ctrl}
	mock.recorder = &MockProductInfoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductInfoServer) EXPECT() *MockProductInfoServerMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductInfoServer) AddProduct(arg0 context.Context, arg1 *proto.Product) (*proto.ProductID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0, arg1)
	ret0, _ := ret[0].(*proto.ProductID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductInfoServerMockRecorder) AddProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductInfoServer)(nil).AddProduct), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockProductInfoServer) GetProduct(arg0 context.Context, arg1 *proto.ProductID) (*proto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(*proto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductInfoServerMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductInfoServer)(nil).GetProduct), arg0, arg1)
}

// SearchProducts mocks base method.
func (m *MockProductInfoServer) SearchProducts(arg0 *proto.SearchQuery, arg1 proto.ProductInfo_SearchProductsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProducts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchProducts indicates an expected call of SearchProducts.
func (mr *MockProductInfoServerMockRecorder) SearchProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProducts", reflect.TypeOf((*MockProductInfoServer)(nil).SearchProducts), arg0, arg1)
}

// mustEmbedUnimplementedProductInfoServer mocks base method.
func (m *MockProductInfoServer) mustEmbedUnimplementedProductInfoServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductInfoServer")
}

// mustEmbedUnimplementedProductInfoServer indicates an expected call of mustEmbedUnimplementedProductInfoServer.
func (mr *MockProductInfoServerMockRecorder) mustEmbedUnimplementedProductInfoServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductInfoServer", reflect.TypeOf((*MockProductInfoServer)(nil).mustEmbedUnimplementedProductInfoServer))
}

// MockUnsafeProductInfoServer is a mock of UnsafeProductInfoServer interface.
type MockUnsafeProductInfoServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProductInfoServerMockRecorder
}

// MockUnsafeProductInfoServerMockRecorder is the mock recorder for MockUnsafeProductInfoServer.
type MockUnsafeProductInfoServerMockRecorder struct {
	mock *MockUnsafeProductInfoServer
}

// NewMockUnsafeProductInfoServer creates a new mock instance.
func NewMockUnsafeProductInfoServer(ctrl *gomock.Controller) *MockUnsafeProductInfoServer {
	mock := &MockUnsafeProductInfoServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProductInfoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProductInfoServer) EXPECT() *MockUnsafeProductInfoServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProductInfoServer mocks base method.
func (m *MockUnsafeProductInfoServer) mustEmbedUnimplementedProductInfoServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductInfoServer")
}

// mustEmbedUnimplementedProductInfoServer indicates an expected call of mustEmbedUnimplementedProductInfoServer.
func (mr *MockUnsafeProductInfoServerMockRecorder) mustEmbedUnimplementedProductInfoServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductInfoServer", reflect.TypeOf((*MockUnsafeProductInfoServer)(nil).mustEmbedUnimplementedProductInfoServer))
}

// MockProductInfo_SearchProductsServer is a mock of ProductInfo_SearchProductsServer interface.
type MockProductInfo_SearchProductsServer struct {
	ctrl     *gomock.Controller
	recorder *MockProductInfo_SearchProductsServerMockRecorder
}

// MockProductInfo_SearchProductsServerMockRecorder is the mock recorder for MockProductInfo_SearchProductsServer.
type MockProductInfo_SearchProductsServerMockRecorder struct {
	mock *MockProductInfo_SearchProductsServer
}

// NewMockProductInfo_SearchProductsServer creates a new mock instance.
func NewMockProductInfo_SearchProductsServer(ctrl *gomock.Controller) *MockProductInfo_SearchProductsServer {
	mock := &MockProductInfo_SearchProductsServer{ctrl: ctrl}
	mock.recorder = &MockProductInfo_SearchProductsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductInfo_SearchProductsServer) EXPECT() *MockProductInfo_SearchProductsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockProductInfo_SearchProductsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockProductInfo_SearchProductsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProductInfo_SearchProductsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockProductInfo_SearchProductsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockProductInfo_SearchProductsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockProductInfo_SearchProductsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockProductInfo_SearchProductsServer) Send(arg0 *proto.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProductInfo_SearchProductsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProductInfo_SearchProductsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockProductInfo_SearchProductsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockProductInfo_SearchProductsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockProductInfo_SearchProductsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockProductInfo_SearchProductsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockProductInfo_SearchProductsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockProductInfo_SearchProductsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockProductInfo_SearchProductsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockProductInfo_SearchProductsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockProductInfo_SearchProductsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockProductInfo_SearchProductsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockProductInfo_SearchProductsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockProductInfo_SearchProductsServer)(nil).SetTrailer), arg0)
}
